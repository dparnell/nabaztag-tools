const HTTP_NORMAL=0;;
const HTTP_STREAM=1;;
const HTTP_DIRECT=2;;

const HTTP_SOLVE=0;;
const HTTP_REACH=1;;
const HTTP_CONNECTED=2;;

var lasthttpevent;;

// type Httpreq contenant l'état d'une requête
//  - sonH : requête fille s'il y a (cas des 302 où on a fait une redirection via une nouvelle requête)
type Httpreq=[cnxH inputH outputH indexH cbH typeH stateH aliveH sonH redirLevelH];;

proto httprequest 5;;
proto httpabort 1;;

//## retourne le code réponse HTTP d'une réponse
//  - s est une chaine, le début de la réponse http
fun httpgetcode s =
	// le code est sur la première ligne, de type "HTTP/1.? XXX etc..." où XXX est le code
	let strstr s " " 0 -> i in
		let strstr s " " i -> j in
			atoi strsub s i+1 j ;;


//## gère le cas où on a reçu une 302 ("moved temporarly") en réponse
//  - cnx la socket de connection de httptcpread
//  - httpreq la request qui nous dit qu'il faut forwarder
// On cherche la nouvelle Location, et on crée un fils à la requête courante.
fun httphandletmpredirect cnx httpreq =
	httpabort httpreq;
	Xw "HTTP - redirection temporaire";
	if (httpreq.redirLevelH > 2) then // on arrive à la 3eme redirection, c'est trop
		( Xw "HTTP - trop de niveaux de redirection : stop"; call httpreq.cbH [httpreq nil] ; nil )
	else
		// reconstruire toute la chaine de réponse, elle ne doit pas être bien longue
		let strcatlist rev httpreq.inputH nil -> reponse in
		(
			let strstr reponse "\13\nLocation: " 0 -> i in
				if nil == i then // pas de location -> erreur
					(
						Xw "HTTP - Could not follow redirection, no 'Location:' found.";
						call httpreq.cbH [httpreq nil] ;
						nil
					)
				else
					let strstr reponse "\13\n" (i+2) -> finloc in
					(
					let strsub reponse (i+12) (finloc-i-11) -> newurl in
					// ici on a l'url vers laquelle on veut rediriger dans newurl.
					(
						Xw "HTTP - Following redirection. new url [" ; Xw newurl; Xw "]";
						let httprequest "GET" newurl nil httpreq.cbH httpreq.typeH -> newReq in
						(
							set newReq.redirLevelH = httpreq.redirLevelH + 1;
							set httpreq.sonH = newReq;
							set httpreq.cbH = nil
						);
					nil
					)
					)
		);
nil;;


// callback de lecture sur la socket d'une requête
fun httptcpread cnx input httpreq=
//	Xw "in httptcpread. input=["; Xw input; Xw "]";
	if input==nil ||0==strlen input then	// erreur ou fin
	(	closetcp cnx;	// on ferme la socket
		if httpreq.typeH==HTTP_NORMAL then
		(
			let rev httpreq.inputH nil -> l in
			let strcatlist l -> s in
			let httpgetcode s -> code in
				if code == 200 then
					call httpreq.cbH [httpreq strcatlist rev httpreq.inputH nil]	// on retourne ce qui a été reçu
				else if code == 302 then
					httphandletmpredirect nil httpreq
				else // 404 ? autre ?
					call httpreq.cbH [httpreq nil]
		)
		else
			call httpreq.cbH [httpreq nil] // HTTP_STREAM or HTTP_DIRECT
	)
	else
	(
//		dump input;
		set lasthttpevent=time;
		set httpreq.aliveH=time_ms;
		if httpreq.typeH==HTTP_NORMAL then
			set httpreq.inputH=input::httpreq.inputH	// on bufferise ce qui a été reçu
		else if httpreq.typeH==HTTP_DIRECT then
		(
			call httpreq.cbH [httpreq input];
			nil
		)
		else
		(
			let strcat hd httpreq.inputH input -> s in
			let strstr s "\13\10\13\10" 0 -> i in
			if i==nil then
				set httpreq.inputH=s::nil
			else
			(
				let httpgetcode s -> code in
				if code == 200 then
				(
					set httpreq.inputH=nil;
					set httpreq.typeH=HTTP_DIRECT;
					call httpreq.cbH [httpreq strsub s 0 i];
					if i+4<strlen s then call httpreq.cbH [httpreq strsub s i+4 nil];
					nil
				)
				else if code == 302 then
				(
					set httpreq.inputH = s::nil;
					httphandletmpredirect cnx httpreq;
					nil
				)
				else // 404 ? autre ?
				( call httpreq.cbH [httpreq input]; nil )
			);
			nil
		);
		nil
	);;

// callback d'écriture sur la socket d'une requête
fun httptcpwrite cnx httpreq=
	set httpreq.stateH=HTTP_CONNECTED; 
	set httpreq.aliveH=time_ms;	
	if httpreq.outputH!=nil then	// s'il y a des choses à envoyer (notamment la première fois)
	(
		Secholn "httptcpwrite";
		set httpreq.indexH=writetcp cnx httpreq.outputH httpreq.indexH;	// envoyer ce qui peut l'être
		if httpreq.indexH==nil then	// si erreur lors de l'envoi
		(	closetcp cnx;	// on ferme la socket
			call httpreq.cbH [httpreq nil]	)	// on retourne nil
		else if httpreq.indexH>=strlen httpreq.outputH then	// sinon si tout a été envoyé
		(	set httpreq.indexH=nil;	// purger les données d'émission
			set httpreq.outputH=nil;
			nil
		)
	);;

const http_prefurl="http://";;	// en-tête normal (mais ici facultatif) d'une requête http


// découper une url en [host port path].
// host est de la forme ip:port
// path ne commence pas par /
fun cuturl url =
	if !strcmp (strsub url 0 strlen http_prefurl) http_prefurl then cuturl strsub url strlen http_prefurl strlen url
	else let strstr url "/" 0 -> i in
		let if i==nil then url else strsub url 0 i -> addr in
		let strstr addr ":" 0 -> j in
		let if j==nil then [addr 80]
			else [strsub addr 0 j atoi strsub addr j+1 strlen addr] -> [host port] in
		let if i==nil then "/" else strsub url i strlen url -> path in
		[host port path];;

fun _httptcpevent t val msg sock=
	if val==TCPWRITE then httptcpwrite t sock
	else if val==TCPCLOSE then httptcpread t nil sock
	else httptcpread t msg sock;
	0;;


fun httpsendreq ip x=
	Secho "found ip="; Secholn ip;
	let x->[port httpreq] in
	if ip==nil then (call httpreq.cbH [httpreq nil]; nil)
	else
	(
		set httpreq.cnxH=opentcp netip nil useparamip ip port fixarg4 #_httptcpevent httpreq;
		set httpreq.stateH=HTTP_REACH;
		nil
	);
	0;;


//##> création d'une requête http
// paramètres : verb=verbe de la requête url=url de la requête postdata=données supplémentaires (nil si aucune) cb=callback de retour
fun httprequest verb url postdata cb type=
	Secho "HTTPREQUEST url=";Secholn url;
	let cuturl url ->[host port path] in	// décodage de l'url de la requête
	let if confGetProxy then strcatlist "http://"::host::":"::(itoa port)::path::nil else path -> path in //Icy-MetaData:1\13\n
	let strcatlist verb::" "::path::" HTTP/1.0\13\nUser-Agent: MTL\13\nPragma: no-cache\13\nIcy-MetaData:1\13\nHost: "::host::"\13\n"::
			if postdata==nil then "\13\n"::nil
			else "Content-length: "::(itoa strlen postdata)::"\13\n\13\n"::postdata::nil
		-> request in	// création de la chaîne requête
	let if confGetProxy then webip confGetProxyip else host -> host in
	let if confGetProxy then confGetProxyport else port -> port in
	let [outputH:request indexH:0 cbH:cb typeH:type stateH:HTTP_SOLVE aliveH:time_ms sonH:nil redirLevelH:0] -> httpreq in	// création de la structure requête
	(
		if isip host 0 then httpsendreq host [port httpreq]
		else
		(
			dnsreq host fixarg2 #httpsendreq [port httpreq];
			nil
		);
		httpreq	// on retourne la structure requête pour pouvoir éventuellement l'interrompre en cours de route
	);;

//##> interruption d'une requête en cours
// on interromp la requête et son fils (si elle en a un)
fun httpabort httpreq=
	if (nil != httpreq.sonH) then httpabort httpreq.sonH;
	closetcp httpreq.cnxH;;	// on ferme la socket de la requête

fun httpenable httpreq v=
	enabletcp httpreq.cnxH v;;
fun httpenabledP httpreq=
	enabledtcpP httpreq.cnxH;;

fun httpstate httpreq = httpreq.stateH;;

fun httpinactive httpreq = time_ms-httpreq.aliveH;;


const http_sep="\13\n\13\n";;	// séparateur entre l'en-tête et le corps de la réponse à une requête

	

//##> retourne le header d'une réponse à une requête
fun httpgetheader res =
	let strstr res http_sep 0 -> i in
	if i==nil then res
	else strsub res 0 i+strlen http_sep;;

//##> retourne le contenu d'une réponse à une requête (sans header)
fun httpgetcontent res =
	let strstr res http_sep 0 -> i in
	if i==nil then nil
	else strsub res i+strlen http_sep strlen res;;

